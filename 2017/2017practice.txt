1a.
public Digits(int num){
    String numStr = num.toString();
    for(int i = 0; i < numStr.length(); i++){
	int temp = numStr.substring(i, i + 1).toInt();
	digitList.add(temp);
    }
}

1b.
public boolean isStrictlyIncreasing(){
    for(int i = 1; i < digitList.size(); i++){
	if(digitList[i] <= digitList[i-1]){return false;}
    }
    return true;
}

2.
public class MultPractice inplements StudyPractice{

    private int num1;
    private int num2;
    public MultPractice(int firstNum, int secondNum){
	num1 = firstNum;
	num2 = secondNum;
    }
    
    public String getProblem(){
	String problem = num1.toString() + " TIMES " + num2.toString();
	return problem;
    }

    public void nextProblem(){num2++;}
}

3a.
public void replaceNthOccurrence(String str, int n, String repl){
    String before = currentPhrase.substring(0, findNthOccurrence(str));
    String after = currentPhrase.substring(findNthOccurrence(str) + str.length(), currentPhrase.length() - 1);
    currentPhrase = before + repl + after;
}

3b.
public int findLastOccurrence(String str){
    for(int i = currentPhrase.length() - 1; i >= str.length(); i--){
	if(currentPhrase.substring(i - str.length(), i) == str){return i;}
    }
    return -1;
}

4a.
public static Position findPosition(int num, int[][] intArr){
    for(int i = 0; i < intArr.size(); i++){
	for(int j = 0; j < intArr[i].size(); j++){
	    if(intArr[i][j] == num){
		Position found = new Position(i,j);
		return found;
	    }
	}
    }
    return null;
}

4b.
public static Position[][] getSuccessorArray(int[][] intArr){
    ArrayList<Position><Position> succArr = new ArrayList<Position><Position>;
    for(int i = 0; i < intArr.size(); i++){
	for(int j = 0; j < intArr[i].size(); j++){
	    succArr[i].add(findPosition(intArr[i][j] + 1, intArr))
	}
    }
    return succArr;
}

















